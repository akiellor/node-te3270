#!/usr/bin/env babel-node --presets es2015

import tap from 'tap';
import chai from 'chai';
import spies from 'chai-spies';
chai.use(spies);
const expect = chai.expect;

import csp from 'js-csp';
import {readFileSync} from 'fs';
import { screen, text, field, fnKey, table } from './../lib/screen';

var loginText = readFileSync(__dirname + '/fixtures/mustang.txt').toString();
var tableText = readFileSync(__dirname + '/fixtures/table.txt').toString();
var tableMissingRowsText = readFileSync(__dirname + '/fixtures/table-missing-rows.txt').toString();

tap.test('screen', (t) => {
  function createTerminal(text) {
    text = text || "";
    var result = csp.chan();
    csp.go(function*(){
      yield csp.put(result, text);
    });

    return {
      command: chai.spy(),
      text: function() {
        return result;
      }
    };
  }

  t.test('text', (tt) => {
    tt.test('should allow for extraction of field data', function(ttt) {
      var terminal = createTerminal(loginText);

      var loginPage = screen(terminal, {
        terminal: text([[3, 72], [3, 79]])
      });

      csp.go(function*() {
        var value = yield loginPage.terminal();
        expect(value).to.equal('TCP20004');
        ttt.done();
      });
    });

    tt.done();
  });

  t.test('fnKey', (tt) => {
    for (let i = 1; i <= 12; i++) {
      tt.test(`fn${i}`, (ttt) => {
        var terminal = createTerminal();

        var loginPage = screen(terminal, {
          functionKey: fnKey(i)
        });

        csp.go(function*() {
          yield loginPage.functionKey();
          expect(terminal.command.__spy.calls[0]).to.deep.equal([`pf(${i})`]);
          ttt.done();
        });
      });
    }
    tt.done();
  });

  t.test('field', (tt) => {
    tt.test('should allow typing to specified location', function(ttt) {
      var terminal = createTerminal();

      var loginPage = screen(terminal, {
        username: field([16, 33])
      });

      csp.go(function*() {
        yield loginPage.username("foo");
        expect(terminal.command.__spy.calls[0]).to.deep.equal(["movecursor(16,33)"]);
        expect(terminal.command.__spy.calls[1]).to.deep.equal(["string(foo)"]);
        ttt.done();
      });
    });

    tt.done();
  });

  t.done();
});
